name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        shell: pwsh
        run: |
          # Enable Remote Desktop and disable Network Level Authentication (if needed)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
            -Name 'fDenyTSConnections' -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
            -Name 'UserAuthentication' -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
            -Name 'SecurityLayer' -Value 0 -Force

          # Remove any existing rule with the same name to avoid duplication
          netsh advfirewall firewall delete rule name="RDP-Tailscale"

          # For testing, allow any incoming connection on port 3389
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

          # (Optional) Restart the Remote Desktop service to ensure changes take effect
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Default Password
        shell: pwsh
        run: |
          $primaryPassword  = 'tamdznhatvutru1'
          $fallbackPassword = 'Tamdznhatvutru1@'

          function NewOrUpdate-LocalUser {
            param(
              [Parameter(Mandatory = $true)][string]$Name,
              [Parameter(Mandatory = $true)][string]$PlainPwd
            )

            $existing = Get-LocalUser -Name $Name -ErrorAction SilentlyContinue
            if ($null -eq $existing) {
              $secure = ConvertTo-SecureString $PlainPwd -AsPlainText -Force
              New-LocalUser -Name $Name -Password $secure -AccountNeverExpires -ErrorAction Stop | Out-Null
            } else {
              # Use 'net user' to reset password for existing local user
              & net user "$Name" "$PlainPwd" | Out-Null
              if ($LASTEXITCODE -ne 0) {
                throw "Failed to set password for $Name"
              }
            }
          }

          $password = $primaryPassword
          try {
            NewOrUpdate-LocalUser -Name 'RDP' -PlainPwd $password
          } catch {
            # If policy rejects the primary password, use fallback with uppercase and special char
            $password = $fallbackPassword
            NewOrUpdate-LocalUser -Name 'RDP' -PlainPwd $password
          }

          # Add to groups (ignore if already a member)
          Add-LocalGroupMember -Group 'Administrators' -Member 'RDP' -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group 'Remote Desktop Users' -Member 'RDP' -ErrorAction SilentlyContinue

          # Export credentials to environment for later steps
          Add-Content -Path $env:GITHUB_ENV -Value "RDP_PASSWORD=$password"
          Add-Content -Path $env:GITHUB_ENV -Value "RDP_CREDS=User: RDP | Password: $password"

          if (-not (Get-LocalUser -Name 'RDP')) {
            Write-Error 'User creation failed'
            exit 1
          }

      - name: Install Tailscale
        shell: pwsh
        run: |
          $tsUrl = 'https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi'
          $installerPath = Join-Path $env:TEMP 'tailscale.msi'

          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList '/i', "`"$installerPath`"", '/quiet', '/norestart' -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        shell: pwsh
        run: |
          # Bring up Tailscale with the provided auth key and set a unique hostname
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID

          # Wait for Tailscale to assign an IP
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
            $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
            Start-Sleep -Seconds 5
            $retries++
          }

          if (-not $tsIP) {
            Write-Error 'Tailscale IP not assigned. Exiting.'
            exit 1
          }

          Add-Content -Path $env:GITHUB_ENV -Value "TAILSCALE_IP=$tsIP"

      - name: Verify RDP Accessibility
        shell: pwsh
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"

          # Test connectivity using Test-NetConnection against the Tailscale IP on port 3389
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
            Write-Error 'TCP connection to RDP port 3389 failed'
            exit 1
          }
          Write-Host 'TCP connectivity successful!'

      - name: Maintain Connection
        shell: pwsh
        run: |
          Write-Host ''
          Write-Host '=== RDP ACCESS ==='
          Write-Host "Address : $env:TAILSCALE_IP"
          Write-Host 'Username: RDP'
          Write-Host "Password: $env:RDP_PASSWORD"
          Write-Host '=================='
          Write-Host ''

          # Keep runner active indefinitely (or until manually cancelled)
          while ($true) {
            Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
            Start-Sleep -Seconds 300
          }
